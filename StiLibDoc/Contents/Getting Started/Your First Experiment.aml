<?xml version="1.0" encoding="utf-8"?>
<topic id="9b336d98-6bbc-4156-8ba8-968020df0f47" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>A quick review of typical usage of StiLib.</para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>A vision experiment</title>
      <steps class="ordered">
      
        <step>
          <content>
            <para>In vision experiment, we usually need a window to present various stimulus.
            StiLib supports two kind of windowing model.</para>
            
<list class="bullet">
  <listItem><para>SLGame -- inherited from standard XNA Game class, using typical gaming loop which 
  constantly call <codeInline>Update()</codeInline> and <codeInline>Draw()</codeInline> methods in sequence 
  while there is no event message to deal with.</para>
  </listItem>
  <listItem><para>SLForm -- inherited from standard .NET windows Forms class, except the same gaming loop of SLGame as default, can be 
  customized to user render loop(RF_fBar(Fast) demo for example).</para>
  </listItem>
</list>
           <para>To create your experiment window, you need to define your own class derived from either of two windowing model.
            It will initialize your Graphic Card via DirectX for your later drawing of your stimulus.
      
            <code language="cs">
            /// &lt;summary&gt;
            /// your experiment.
            /// &lt;/summary&gt;
            class MyEx : SLForm
            {
                // Init window -- width:800, height:600, windowed, 
                // vertical synchronization, show cursor
                MyEx(): base(800, 600, 0, true, true)
                {
                }
            }
            </code> 
            </para>
          </content>
        </step>
        
        <step>
          <content>
            <para>Now you have your own window, you can add some basic stimulus such as Bar, Grating, Image, Sound, Text, 
            Model ..., and most importent: your custom experiment design logic. StiLib offers lot of helpers to do 
            common tasks like: flowcontrol, parallal port triggering, timing etc.
            All you need is to override some virtual methods that are automatically called in render loop. 
            The Most importent is <codeInline>Draw()</codeInline> where you may draw your stimulus, <codeInline>Update()</codeInline> 
            where you may do your experiment design logic and <codeInline>Initialize()</codeInline> where you can do necessary Initialization.

             <code language="cs">
             /// &lt;summary&gt;
             /// your experiment.
             /// &lt;/summary&gt;
             class MyEx : SLForm
             {
                 // Init window -- width:800, height:600, windowed, 
                 // vertical synchronization, show cursor
                 MyEx(): base(800, 600, 0, true, true)
                 {
                 }
                 
                 Grating grating;
                 Text text;
                 SLTimer timer;
                 
                 // Get your stimulus and helpers ready
                 protected override void Initialize()
                 {
                     text = new Text(GraphicsDevice, Services, "Content", "Arial");
                     timer = new SLTimer();
                     timer.Start();
                     grating = new Grating(GraphicsDevice, Services, "Content");
                 }
                 
                 // Draw your stimulus
                 protected override void Draw()
                 {
                     GraphicsDevice.Clear(Color.Gray);
                     grating.SetTime((float)timer.ElapsedSeconds);
                     grating.Draw(GraphicsDevice);
                     text.Draw("My First Experiment !");
                 }
                 
             }
             </code>
             </para>
          </content>
        </step>
        
        <step>
              <content>
                <para>If your experiment class is ready, create a experiment instance, run it.
                
                <code language="cs">
                /// &lt;summary&gt;
                /// The main entry point for your experiment.
                /// &lt;/summary&gt;
                static void Main(string[] args)
                {
                    Application.EnableVisualStyles();
                    Application.SetCompatibleTextRenderingDefault(false);
                    Application.Run(new MyEx());
                }
                </code>

                </para>
              </content>
        </step>
        
      </steps>
      <conclusion>Now that you know StiLib basics, you can explore other 
      functionalities in StiLib. There are also demos in release package using <token>F#</token> that you may start with.</conclusion>
    </procedure>
   
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>